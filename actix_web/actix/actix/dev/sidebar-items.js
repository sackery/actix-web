initSidebarItems({"enum":[["ActorState","Actor execution state"],["MailboxError","Set of error that can occurred during message delivery process"],["Running",""],["SendError",""]],"mod":[["actors","Helper actors"],["io",""],["msgs","Actix system messages"]],"struct":[["ActorResponse","Helper type for representing different type of message responses"],["Condition",""],["ContextImpl","Actor execution context impl"],["Envelope",""],["MessageResult","Helper type that implements `MessageResponse` trait"],["Registry","Actors registry"],["Request","`Request` is a `Future` which represents asynchronous message sending process."],["Response","Helper type for representing different type of message responses"],["SyncArbiter","Sync arbiter"],["SystemRegistry","System wide actors registry"]],"trait":[["ActorContext","Actor execution context"],["ArbiterService","Trait defines arbiter's service."],["ContextFutureSpawner","Helper trait which can spawn future into actor's context"],["Message","Message type"],["MessageResponse","Trait which defines message response"],["ResponseChannel","Trait defines message response channel"],["StreamHandler","Stream handler"],["StreamHandler2","Stream handler"],["Supervised","Actors with ability to restart after failure"],["SystemService","Trait defines system's service."],["ToEnvelope","Converter trait, packs message to suitable envelope"]],"type":[["ResponseActFuture","A specialized actor future for async message handler"]]});